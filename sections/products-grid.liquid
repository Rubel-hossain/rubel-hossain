{% comment %}
  Section: Products Grid View
  Product showcase grid with interactive hotspots and modal
  Matches requested Shopify modal design specifications
{% endcomment %}

{%- liquid
  assign section_id = section.id
  assign heading = section.settings.heading
  assign max_products = section.settings.max_products | default: 6
  assign product_source = section.settings.product_source | default: 'manual'
  assign collection_handle = section.settings.collection
  assign money_format = shop.money_format | escape
-%}

<section 
  id="product-showcase-{{ section_id }}" 
  class="product-showcase"
  data-section-id="{{ section_id }}"
  data-section-type="product-showcase"
  data-money-format="{{ shop.money_format | escape }}">
  
  <div class="product-showcase__container page-width">
    {%- if heading != blank -%}
      <h2 class="product-showcase__heading">
        {{ heading | escape }}
      </h2>
    {%- endif -%}

    <div class="product-showcase__grid">
      {%- if product_source == 'collection' and collection_handle != blank -%}
        {%- comment -%} Fetch the collection object from the handle {%- endcomment -%}
        {%- assign collection_obj = collections[collection_handle] -%}
        
        {%- if collection_obj != blank and collection_obj.products.size > 0 -%}
          {%- assign collection_products = collection_obj.products -%}
          {%- for product in collection_products limit: max_products -%}
            {%- render 'grid-product-item',
              product: product,
              image: product.featured_image,
              hotspot_x: section.settings.hotspot_x,
              hotspot_y: section.settings.hotspot_y,
              section_id: section_id,
              block_attributes: ''
            -%}
          {%- endfor -%}
        {%- else -%}
          {%- comment -%} Show placeholder when collection is empty or not found {%- endcomment -%}
          <div class="product-showcase__empty-state">
            <p>No products found in the selected collection. Please select a valid collection with products.</p>
          </div>
        {%- endif -%}
      {%- else -%}
        {%- assign displayed_blocks = 0 -%}
        {%- for block in section.blocks -%}
          {%- if displayed_blocks < max_products -%}
            {%- assign product_obj = block.settings.product -%}
            {%- assign image = block.settings.image -%}
            
            {%- comment -%} Always render the block, even if no product is selected {%- endcomment -%}
            
            <div class="product-showcase__item" {{ block.shopify_attributes }}>
              <div class="product-showcase__item-wrapper">
                {%- if product_obj == blank -%}
                  {%- comment -%} No product selected - show placeholder {%- endcomment -%}
                  <div class="product-showcase__placeholder product-showcase__placeholder--empty">
                    <div class="product-showcase__placeholder-content">
                      <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" class="product-showcase__placeholder-icon">
                        <circle cx="12" cy="12" r="10"/>
                        <line x1="12" y1="8" x2="12" y2="16"/>
                        <line x1="8" y1="12" x2="16" y2="12"/>
                      </svg>
                      <h3 class="product-showcase__placeholder-title">Select Product</h3>
                      <p class="product-showcase__placeholder-description">Choose a product to showcase</p>
                    </div>
                  </div>
                {%- else -%}
                  {%- comment -%} Product is selected {%- endcomment -%}
                  {%- if image != blank -%}
                    {%- assign image_alt = block.settings.image_alt | default: product_obj.title | escape -%}
                    <picture class="product-showcase__picture">
                      <source 
                        media="(max-width: 749px)"
                        srcset="{{ image | image_url: width: 600 }} 1x, {{ image | image_url: width: 1200 }} 2x">
                      <source 
                        media="(min-width: 750px)"
                        srcset="{{ image | image_url: width: 800 }} 1x, {{ image | image_url: width: 1600 }} 2x">
                      <img 
                        class="product-showcase__image"
                        src="{{ image | image_url: width: 800 }}"
                        alt="{{ image_alt }}"
                        loading="lazy"
                        width="800"
                        height="1067">
                    </picture>
                  {%- elsif product_obj.featured_image != blank -%}
                    {%- comment -%} Use product image if no custom image is set {%- endcomment -%}
                    <picture class="product-showcase__picture">
                      <source 
                        media="(max-width: 749px)"
                        srcset="{{ product_obj.featured_image | image_url: width: 600 }} 1x, {{ product_obj.featured_image | image_url: width: 1200 }} 2x">
                      <source 
                        media="(min-width: 750px)"
                        srcset="{{ product_obj.featured_image | image_url: width: 800 }} 1x, {{ product_obj.featured_image | image_url: width: 1600 }} 2x">
                      <img 
                        class="product-showcase__image"
                        src="{{ product_obj.featured_image | image_url: width: 800 }}"
                        alt="{{ product_obj.title | escape }}"
                        loading="lazy"
                        width="800"
                        height="1067">
                    </picture>
                  {%- else -%}
                    <div class="product-showcase__placeholder">
                      {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg' }}
                      <span class="product-showcase__placeholder-text">Add product image</span>
                    </div>
                  {%- endif -%}

                  <button 
                    type="button"
                    class="product-showcase__hotspot"
                    aria-label="View {{ product_obj.title | escape }}"
                    data-product-handle="{{ product_obj.handle | escape }}"
                    style="--hotspot-x: {{ block.settings.hotspot_x | default: 85 }}%; --hotspot-y: {{ block.settings.hotspot_y | default: 15 }}%;">
                    <span class="product-showcase__hotspot-indicator">
                      <svg class="product-showcase__hotspot-icon" width="20" height="20" viewBox="0 0 20 20" fill="none" aria-hidden="true">
                        <path d="M10 4V16M4 10H16" stroke="#000000" stroke-width="2" stroke-linecap="round"/>
                      </svg>
                    </span>
                    <span class="product-showcase__hotspot-pulse"></span>
                  </button>
                  
                  {%- comment -%} Product info overlay for theme editor {%- endcomment -%}
                  <div class="product-showcase__product-info">
                    <span class="product-showcase__product-title">{{ product_obj.title }}</span>
                    <span class="product-showcase__product-price">{{ product_obj.price | money }}</span>
                  </div>
                {%- endif -%}
              </div>
            </div>
            
            {%- assign displayed_blocks = displayed_blocks | plus: 1 -%}
          {%- endif -%}
        {%- endfor -%}
      {%- endif -%}
    </div>
  </div>

  {%- comment -%} Product Modal {%- endcomment -%}
  <div 
    class="product-modal"
    id="product-modal-{{ section_id }}"
    role="dialog"
    aria-modal="true"
    aria-labelledby="product-modal-title-{{ section_id }}"
    aria-hidden="true"
    hidden>
    
    <div class="product-modal__overlay" data-modal-close></div>
    
    <div class="product-modal__dialog">
      <button 
        type="button"
        class="product-modal__close-button"
        aria-label="Close"
        data-modal-close>
        <svg width="20" height="20" viewBox="0 0 20 20" fill="none" aria-hidden="true">
          <path d="M15 5L5 15M5 5L15 15" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        </svg>
      </button>

      <div class="product-modal__loading-state" data-loading-state hidden>
        <div class="product-modal__spinner"></div>
      </div>

      <div class="product-modal__error-state" data-error-state hidden>
        <p>Error loading product</p>
      </div>

      <div class="product-modal__content" data-content-state hidden>
        <!-- Compact header: thumbnail on the left, title/price/description on the right -->
        <div class="product-modal__header">
          <img
            class="product-modal__thumb product-modal__image"
            src=""
            alt=""
            loading="lazy"
            data-main-image
            width="auto"
            height="auto"
          >

          <div class="product-modal__summary">
            <h3 class="product-modal__title" id="product-modal-title-{{ section_id }}"></h3>
            <div class="product-modal__pricing">
              <span class="product-modal__current-price" data-price-current></span>
              <span class="product-modal__compare-price" data-price-compare hidden></span>
            </div>
            <div class="product-modal__description" data-description></div>
          </div>
        </div>

        <!-- Options and Add to Cart -->
        <form class="product-modal__form" data-product-form>
          <div class="product-modal__options">
            <!-- Color options row -->
            <div class="product-modal__color-selector" data-color-selector style="display: none;">
              <label class="product-modal__option-label">Color</label>
              <div class="product-modal__color-options" data-color-options></div>
            </div>

            <!-- Size options -->
            <div class="product-modal__size-selector" data-size-selector style="display: none;">
              <label class="product-modal__option-label">Size</label>
              <div class="product-modal__size-select-wrapper">
                <select class="product-modal__size-select" data-size-select>
                  <option value="">Choose your size</option>
                </select>
                <svg class="product-modal__select-arrow" width="12" height="8" viewBox="0 0 12 8" fill="none">
                  <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
            </div>

            <!-- Other dynamic options container -->
            <div class="product-modal__dynamic-options" data-options-container></div>
          </div>

          <input type="hidden" name="id" value="" data-variant-id>

          <div class="product-modal__add-to-cart">
            <button
              type="submit"
              class="product-modal__add-to-cart-button"
              data-add-to-cart
              disabled>
              <span data-btn-text>ADD TO CART</span>
              <span data-btn-loading hidden>Adding...</span>
              <svg class="product-modal__btn-arrow" width="20" height="20" viewBox="0 0 20 20" fill="none" aria-hidden="true">
                <path d="M7 5L12 10L7 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</section>

<style>
  /* CSS Variables for Theming */
  .product-showcase {
    --font-family-one:  "Lustria", serif;
    --font-family-two:  "Jost", sans-serif;
    --showcase-bg: {{ section.settings.background_color | default: '#ffffff' }};
    --showcase-text: #1a1a1a;
    --showcase-text-light: #666666;
    --showcase-border: #e5e5e5;
    --showcase-accent: #000000;
    --modal-bg: #ffffff;
    --modal-overlay: rgba(0, 0, 0, 0.75);
    --hotspot-bg: rgba(248, 248, 248, 0.9);
    --hotspot-hover: rgba(255, 255, 255, 0.95);
    --tisso-radius: 0;
    --tisso-transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  /* Container */
  .product-showcase {
    padding: 60px 0;
    background-color: var(--showcase-bg);
  }

  .product-showcase__container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 20px;
  }

  @media screen and (min-width: 750px) {
    .product-showcase {
      padding: 80px 0;
    }
    
    .product-showcase__container {
      padding: 0 50px;
    }
  }

  /* Heading */
  .product-showcase__heading {
    margin: 0;
    font-size: clamp(24px, 4vw, 36px);
    font-weight: 400;
    line-height: 1.2;
    color: var(--showcase-text);
    font-family: var(--font-family-one);
    padding-bottom: 30px;
  }

  /* Grid Layout */
  .product-showcase__grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
  }

  @media screen and (min-width: 750px) {
    .product-showcase__grid {
      grid-template-columns: repeat(3, 1fr);
      gap: 20px;
    }
  }

  @media screen and (min-width: 990px) {
    .product-showcase__grid {
      gap: 20px;
    }
  }

  /* Grid Item */
  .product-showcase__item {
    position: relative;
    overflow: hidden;
    border-radius: var(--tisso-radius);
    background: #f8f8f8;
  }

  .product-showcase__item-wrapper {
    position: relative;
    aspect-ratio: 1 / 1;
    overflow: hidden;
  }

  .product-showcase__picture,
  .product-showcase__image {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .product-showcase__placeholder {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #f5f5f5 0%, #e8e8e8 100%);
    color: var(--showcase-text-light);
  }

  .product-showcase__placeholder svg {
    width: 80px;
    height: 80px;
    opacity: 0.3;
    margin-bottom: 12px;
  }

  .product-showcase__placeholder-text {
    font-size: 14px;
    opacity: 0.7;
  }

  /* Empty product placeholder - Shopify style */
  .product-showcase__placeholder--empty {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border: 2px dashed #dee2e6;
    /*border-radius: var(--tisso-radius);*/
    transition: var(--tisso-transition);
  }

  .product-showcase__placeholder--empty:hover {
    border-color: #6c757d;
    background: linear-gradient(135deg, #f1f3f4 0%, #e1e5e9 100%);
  }

  .product-showcase__placeholder-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 40px 20px;
  }

  .product-showcase__placeholder-icon {
    color: #6c757d;
    margin-bottom: 16px;
  }

  .product-showcase__placeholder-title {
    margin: 0 0 8px;
    font-size: 18px;
    font-weight: 500;
    color: #343a40;
  }

  .product-showcase__placeholder-description {
    margin: 0;
    font-size: 14px;
    color: #6c757d;
    opacity: 0.8;
  }

  /* Product info overlay */
  .product-showcase__product-info {
    position: absolute;
    bottom: 16px;
    left: 16px;
    right: 16px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(8px);
    /*border-radius: 8px;*/
    padding: 12px 16px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    opacity: 0;
    transform: translateY(10px);
    transition: var(--tisso-transition);
    pointer-events: none;
    z-index: 1;
  }

  /* Show product info on hover on desktop, always show on mobile */
  @media screen and (min-width: 750px) {
    .product-showcase__item:hover .product-showcase__product-info {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media screen and (max-width: 749px) {
    .product-showcase__product-info {
      opacity: 1;
      transform: translateY(0);
      position: static;
      background: white;
      margin-top: 12px;
      border: 1px solid var(--showcase-border);
    }
  }

  .product-showcase__product-title {
    display: block;
    font-size: 14px;
    font-weight: 500;
    color: var(--showcase-text);
    margin-bottom: 4px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .product-showcase__product-price {
    display: block;
    font-size: 16px;
    font-weight: 600;
    color: var(--showcase-accent);
  }

  /* Theme editor improvements */
  .shopify-section-settings {
    .product-showcase__product-info {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Empty collection state */
  .product-showcase__empty-state {
    grid-column: 1 / -1;
    text-align: center;
    padding: 60px 20px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border: 2px dashed #dee2e6;
    /*border-radius: var(--tisso-radius);*/
  }

  .product-showcase__empty-state p {
    margin: 0;
    font-size: 16px;
    color: #6c757d;
  }

  /* Hotspot */
  .product-showcase__hotspot {
    position: absolute;
    left: var(--hotspot-x);
    top: var(--hotspot-y);
    transform: translate(-50%, -50%);
    width: 25px;
    height: 25px;
    padding: 0;
    border: 1px solid rgba(255, 255, 255, 0.7);
    border-radius: 50%;
    background: var(--hotspot-bg);
    color: white;
    cursor: pointer;
    transition: var(--tisso-transition);
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .product-showcase__hotspot:hover {
    background: var(--hotspot-hover);
    transform: translate(-50%, -50%) scale(1.15);
  }

  .product-showcase__hotspot:focus-visible {
    outline: 2px solid white;
    outline-offset: 2px;
  }

  .product-showcase__hotspot-indicator {
    position: relative;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .product-showcase__hotspot-icon {
    width: 15px;
    height: 15px;
  }

  .product-showcase__hotspot-pulse {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.4);
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    pointer-events: none;
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1);
    }
    50% {
      opacity: 0;
      transform: translate(-50%, -50%) scale(1.5);
    }
  }

  /* Body overlay when modal is open */
  body.product-modal-open {
    overflow: hidden;
  }

  body.product-modal-open::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    z-index: 999998;
    backdrop-filter: blur(4px);
  }

  /* Modal */
  .product-modal {
    position: fixed;
    inset: 0;
    z-index: 999999;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 16px;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.1s ease, visibility 0s ease;
    overflow-y: auto;
  }

  .product-modal:not([hidden]) {
    opacity: 1;
    visibility: visible;
  }

  .product-modal__overlay {
    position: absolute;
    inset: 0;
    background: transparent;
    cursor: pointer;
  }

  .product-modal__dialog {
    position: relative;
    width: 100%;
    max-width: 450px;
    max-height: calc(100vh - 32px);
    background: var(--modal-bg);
    border-radius: var(--modal-radius);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    transform: scale(0.95) translateY(10px);
    transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    overflow: hidden;
    margin: auto;
    font-family: var(--font-family-two);
  }

  .product-modal:not([hidden]) .product-modal__dialog {
    transform: scale(1) translateY(0);
  }

  .product-modal__close-button {
    position: absolute;
    top: 16px;
    right: 16px;
    z-index: 10;
    width: 40px;
    height: 40px;
    padding: 0;
    border: none;
    border-radius: 50%;
    background: transparent;
    color: #000;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: var(--modal-transition);
  }


  .product-modal__close-button:focus-visible {
    outline: 0;
    outline-offset: 0;
  }

  /* Modal States */
  .product-modal__loading-state,
  .product-modal__error-state {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 400px;
    padding: 40px;
    text-align: center;
  }

  .product-modal__spinner {
    width: 40px;
    height: 40px;
    border: 3px solid var(--modal-border);
    border-top-color: var(--modal-accent);
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .product-modal__error-state p {
    color: #dc2626;
    font-size: 16px;
  }

  /* Modal Body */
  .product-modal__content {
    display: flex;
    flex-direction: column;
    max-height: calc(100vh - 32px);
    overflow: hidden;
  }

  @media screen and (min-width: 750px) {
    .product-modal__content {
      flex-direction: row;
      overflow: hidden;
      min-height: 500px;
      max-height: calc(100vh - 32px);
    }
  }

  @media screen and (max-width: 749px) {
    .product-modal {
      padding: 12px;
      align-items: flex-start;
      padding-top: 20px;
    }
    
    .product-modal__dialog {
      max-height: calc(100vh - 40px);
      width: 100%;
      margin: 0;
    }
    
    .product-modal__content {
      max-height: calc(100vh - 40px);
      overflow-y: auto;
    }
  }

  .product-modal__media-container {
    flex-shrink: 0;
    background: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
  }

  @media screen and (min-width: 750px) {
    .product-modal__media-container {
      width: 50%;
      padding: 40px;
    }
  }

  .product-modal__image {
    width: 100%;
    height: auto;
    max-height: 300px;
    object-fit: cover;
    /*border-radius: 8px;*/
  }

  @media screen and (min-width: 750px) {
    .product-modal__image {
      max-height: 400px;
    }
  }

  /* Modal Info */
  .product-modal__details {
    flex: 1;
    padding: 30px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    justify-content: center;
    min-height: 0;
  }

  @media screen and (min-width: 750px) {
    .product-modal__details {
      padding: 40px;
    }
  }

  @media screen and (max-width: 749px) {
    .product-modal__details {
      padding: 20px;
      justify-content: flex-start;
      overflow-y: auto;
      flex: 1;
      min-height: 0;
    }
  }

  .product-modal__title {
    margin: 0 0 16px;
    font-size: clamp(20px, 3vw, 24px);
    line-height: 1.3;
    color: var(--modal-text);
    font-family: var(--font-family-two);
    font-weight: 300;
  }

  .product-modal__pricing {
    display: flex;
    align-items: baseline;
    gap: 12px;
    margin-bottom: 20px;
  }

  .product-modal__current-price {
    font-size: 20px;
    font-weight: 400;
    color: var(--modal-text);
  }

  .product-modal__compare-price {
    font-size: 18px;
    color: var(--modal-text-light);
    text-decoration: line-through;
  }

  .product-modal__description {
    margin-bottom: 24px;
    font-size: 14px;
    line-height: 1.6;
    color: var(--modal-text-light);
  }

  /* Form Elements */
  .product-modal__form {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .product-modal__options {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .product-modal__option-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .product-modal__option-label {
    display: block;
    margin-bottom: 8px;
    font-size: 12px;
    font-weight: 600;
    color: #1a1a1a;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  /* Color Selector */
  .product-modal__color-selector {
    margin-bottom: 16px;
  }

  .product-modal__color-options {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
  }

  .product-modal__color-option {
    min-width: 80px;
    height: 40px;
    padding: 0 12px;
    outline: 1px solid #000000;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 13px;
    font-weight: 500;
    text-transform: capitalize;
    transition: all 0.2s ease;
    background: white;
    color: #1a1a1a;
  }

  .product-modal__color-option.selected {
    background: #1a1a1a;
    outline-color: #000000;
    color: white !important;
  }

  .product-modal__color-option:hover {
    border-color: var(--modal-text);
  }

  /* Size Selector */
  .product-modal__size-selector {
    position: relative;
    margin-bottom: 16px;
  }

  .product-modal__size-select {
    width: 100%;
    padding: 12px 40px 12px 16px;
    border: 1px solid #000000;
    font-size: 14px;
    background: white;
    cursor: pointer;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    outline: none;
    transition: border-color 0.2s ease;
  }

  .product-modal__size-select:focus {
    border-color: var(--modal-text);
  }
  
  .product-modal__size-select-wrapper {
    position: relative;
  }

  .product-modal__select-arrow {
    position: absolute;
    right: 16px;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    color: #666;
  }

  .product-modal__option-select {
    width: 100%;
    padding: 12px 40px 12px 16px;
    font-size: 14px;
    color: var(--modal-text);
    background: white;
    border: 2px solid var(--modal-border);
    border-radius: 8px;
    cursor: pointer;
    transition: var(--modal-transition);
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg width='12' height='8' viewBox='0 0 12 8' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1 1.5L6 6.5L11 1.5' stroke='%23666666' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 16px center;
  }

  .product-modal__option-select:hover {
    border-color: var(--modal-accent);
  }

  .product-modal__option-select:focus-visible {
    outline: 2px solid var(--modal-accent);
    outline-offset: 2px;
  }

  /* Swatches */
  .product-modal__option-swatches {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .product-modal__swatch {
    position: relative;
    min-width: 80px;
    padding: 10px 16px;
    font-size: 14px;
    color: var(--modal-text);
    background: white;
    border: 2px solid var(--modal-border);
    border-radius: 8px;
    cursor: pointer;
    transition: var(--modal-transition);
    text-align: center;
  }

  .product-modal__swatch:hover {
    border-color: var(--modal-accent);
  }

  .product-modal__swatch[aria-checked="true"] {
    border-color: var(--modal-accent);
    background: var(--modal-accent);
    color: white;
  }

  .product-modal__swatch:focus-visible {
    outline: 2px solid var(--modal-accent);
    outline-offset: 2px;
  }

  /* Quantity Selector */
  .product-modal__quantity {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .product-modal__quantity-label {
    font-size: 14px;
    font-weight: 500;
    color: var(--modal-text);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .product-modal__quantity-wrapper {
    display: flex;
    align-items: center;
    border: 2px solid var(--modal-border);
    border-radius: 8px;
    overflow: hidden;
  }

  .product-modal__quantity-btn {
    width: 40px;
    height: 40px;
    padding: 0;
    border: none;
    background: transparent;
    color: var(--modal-text);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: var(--modal-transition);
  }

  .product-modal__quantity-btn:hover {
    background: var(--modal-accent);
    color: white;
  }

  .product-modal__quantity-input {
    flex: 1;
    height: 40px;
    padding: 0 16px;
    font-size: 16px;
    text-align: center;
    border: none;
    background: transparent;
    color: var(--modal-text);
    -moz-appearance: textfield;
  }

  .product-modal__quantity-input::-webkit-outer-spin-button,
  .product-modal__quantity-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  /* Submit Button */
  .product-modal__add-to-cart {
    margin-top: 20px;
  }

  .product-modal__add-to-cart-button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    width: 100%;
    min-height: 52px;
    padding: 16px 32px;
    font-size: 14px;
    font-weight: 400;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    color: white;
    background: #1a1a1a;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .product-modal__add-to-cart-button:hover:not(:disabled) {
    background: #333333;
  }

  .product-modal__add-to-cart-button:disabled {
    background: #ccc;
    cursor: not-allowed;
  }

  .product-modal__add-to-cart-button:focus-visible {
    outline: 2px solid var(--modal-accent);
    outline-offset: 2px;
  }

  .product-modal__btn-arrow {
    transition: transform 0.2s ease;
  }

  .product-modal__add-to-cart-button:hover:not(:disabled) .product-modal__btn-arrow {
    transform: translateX(4px);
  }

  /* Accessibility */
  .visually-hidden {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    margin: -1px !important;
    padding: 0 !important;
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    overflow: hidden !important;
  }

  /* Mobile Responsiveness - Enhanced */
  @media screen and (max-width: 749px) {
    .product-modal__dialog {
      max-width: calc(100% - 24px);
      margin: 12px;
      max-height: calc(100vh - 40px);
    }
    
    .product-modal__content {
      flex-direction: column;
      max-height: calc(100vh - 40px);
    }
    
    .product-modal__media {
      width: 100%;
      padding: 16px;
      flex-shrink: 0;
    }
    
    .product-modal__image {
      max-height: 250px;
      width: 100%;
      object-fit: cover;
    }
    
    .product-modal__details {
      padding: 16px;
      justify-content: flex-start;
      overflow-y: visible;
    }
    
    .product-modal__title {
      font-size: 20px;
      margin-bottom: 12px;
    }
    
    .product-modal__pricing {
      margin-bottom: 16px;
    }
    
    .product-modal__current-price {
      font-size: 18px;
    }
    
    .product-modal__description {
      margin-bottom: 16px;
      font-size: 14px;
      line-height: 1.5;
    }
    
    .product-modal__form {
      gap: 16px;
    }
    
    .product-modal__options {
      gap: 12px;
    }
    
    .product-modal__color-option {
      width: 45px;
      height: 32px;
      font-size: 11px;
    }
    
    .product-modal__size-select {
      font-size: 14px;
      padding: 12px 16px;
    }
    
    .product-modal__add-to-cart {
      padding: 14px 24px;
      font-size: 13px;
      min-height: 48px;
    }
  }
  /* Compact modal overrides for header layout and color buttons */
  .product-modal__dialog {
    border: 1px solid var(--showcase-border);
    background: #fff;
  }

  /* Force single-column flow for the content body */
  .product-modal__content {
    display: block;
    max-height: none;
  }

  .product-modal__header {
    display: flex;
    gap: 16px;
    align-items: flex-start;
    padding: 20px;
    border-bottom: 1px solid var(--showcase-border);
  }

  .product-modal__thumb {
    width: 120px;
    height: 140px;
    object-fit: cover;
    border-radius: 8px;
    background: #f6f6f6;
    flex-shrink: 0;
  }

  .product-modal__summary {
    flex: 1;
    min-width: 0;
  }

  .product-modal__title {
    font-size: clamp(18px, 2.2vw, 22px);
    margin: 0 0 6px;
    color: #111;
    padding-right: 20px;
  }

  .product-modal__pricing {
    margin: 0 0 8px;
    gap: 8px;
  }

  .product-modal__current-price { font-weight: 400; }

  .product-modal__description {
    font-size: 14px;
    line-height: 1.2;
    color: var(--showcase-text-light);
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 4; /* clamp to 4 lines */
    overflow: hidden;
  }

  .product-modal__form { padding: 20px; }

  .product-modal__color-options { display: flex; gap: 10px; flex-wrap: wrap; }

  .product-modal__color-option {
    min-width: 90px;
    height: 40px;
    padding: 8px 12px;
    border: 1px solid #e5e7eb;
    border-left: 3px solid var(--swatch, #9ca3af);
    background: #fff;
    color: #111;
    font-size: 13px;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
  }

  .product-modal__color-option:hover { border-color: #9ca3af; }

  .product-modal__color-option.selected {
    border-left-width: 5px;
    box-shadow: 0 0 0 1px #111 inset;
  }

  .product-modal__size-selector { margin-top: 6px; }

  @media screen and (max-width: 480px) {
    .product-modal__header { padding: 16px; }
    .product-modal__thumb { width: 100px; height: 120px; }
    .product-modal__form { padding: 16px; }
  }
</style>

<script>
  class ProductShowcaseModal {
    constructor(section) {
      this.section = section;
      this.sectionId = section.dataset.sectionId;
      this.modal = section.querySelector('.product-modal');
      
      if (!this.modal) {
        return;
      }
      
      this.elements = {
        loadingState: this.modal.querySelector('[data-loading-state]'),
        errorState: this.modal.querySelector('[data-error-state]'),
        contentState: this.modal.querySelector('[data-content-state]'),
        modalImage: this.modal.querySelector('.product-modal__image'),
        modalTitle: this.modal.querySelector('.product-modal__title'),
        priceCurrentElement: this.modal.querySelector('[data-price-current]'),
        priceCompareElement: this.modal.querySelector('[data-price-compare]'),
        descriptionElement: this.modal.querySelector('[data-description]'),
        optionsContainer: this.modal.querySelector('[data-options-container]'),
        variantIdInput: this.modal.querySelector('[data-variant-id]'),
        submitButton: this.modal.querySelector('[data-add-to-cart]'),
        buttonText: this.modal.querySelector('[data-btn-text]'),
        buttonLoading: this.modal.querySelector('[data-btn-loading]'),
        form: this.modal.querySelector('[data-product-form]')
      };
      
      // Validate critical elements
      const criticalElements = ['loadingState', 'errorState', 'contentState', 'modalTitle'];
      const missingElements = criticalElements.filter(key => !this.elements[key]);
      
      if (missingElements.length > 0) {
        return;
      }
      
      this.currentProduct = null;
      this.selectedOptions = {};
      this.isSubmitting = false;
      
      this.init();
    }
    
    init() {
      // Find all hotspots
      const hotspots = this.section.querySelectorAll('.product-showcase__hotspot');
      
      // Hotspot click handlers
      hotspots.forEach((hotspot, index) => {
        const handle = hotspot.dataset.productHandle;
        
        hotspot.addEventListener('click', (e) => {
          e.preventDefault();
          
          if (handle && handle.trim() !== '') {
            this.loadProduct(handle.trim());
          } else {
            this.showError('No product assigned to this hotspot. Please assign a product in the theme editor.');
          }
        });
      });
      
      // Modal close handlers
      this.modal.querySelectorAll('[data-modal-close]').forEach(element => {
        element.addEventListener('click', () => this.closeModal());
      });
      
      // Escape key handler
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !this.modal.hidden) {
          this.closeModal();
        }
      });
      
      // Form submit handler
      if (this.elements.form) {
        this.elements.form.addEventListener('submit', (e) => {
          e.preventDefault();
          this.handleAddToCart();
        });
      }
    }
    
    formatMoney(cents) {
      try {
        // Ensure cents is a valid number
        const centAmount = parseInt(cents, 10);
        if (isNaN(centAmount)) {
          return 'Price unavailable';
        }

        // Try to use Shopify's formatMoney function first
        if (window.Shopify && typeof window.Shopify.formatMoney === 'function') {
          const moneyFormat = this.section.dataset.moneyFormat;
          if (moneyFormat) {
            return window.Shopify.formatMoney(centAmount, moneyFormat);
          } else {
            return window.Shopify.formatMoney(centAmount);
          }
        }
        
        // Fallback: Get money format from section data or use default
        const moneyFormat = this.section.dataset.moneyFormat || '${{amount}}';
        const amount = (centAmount / 100).toFixed(2);
        
        // Handle different money format patterns
        let formatted = moneyFormat;
        formatted = formatted.replace(/\{\{\s*amount\s*\}\}/g, amount);
        formatted = formatted.replace(/\{\{\s*amount_no_decimals\s*\}\}/g, Math.round(centAmount / 100));
        formatted = formatted.replace(/\{\{\s*amount_with_comma_separator\s*\}\}/g, amount.replace('.', ','));
        
        return formatted;
      } catch (error) {
        console.error('Error formatting money:', error);
        // Last resort fallback
        const amount = (parseInt(cents, 10) / 100).toFixed(2);
        return `$${amount}`;
      }
    }
    
    showState(state) {
      // Hide all states
      const allStates = [this.elements.loadingState, this.elements.errorState, this.elements.contentState];
      allStates.forEach((el) => {
        if (el) {
          el.hidden = true;
          el.style.display = 'none';
        }
      });
      
      // Show target state
      if (state) {
        state.hidden = false;
        state.style.display = 'block';
      }
    }
    
    openModal() {
      this.modal.hidden = false;
      this.modal.setAttribute('aria-hidden', 'false');
      document.body.classList.add('product-modal-open');
      
      // Focus management
      setTimeout(() => {
        const closeBtn = this.modal.querySelector('.product-modal__close-button');
        if (closeBtn) closeBtn.focus();
      }, 100);
    }
    
    closeModal() {
      this.modal.hidden = true;
      this.modal.setAttribute('aria-hidden', 'true');
      document.body.classList.remove('product-modal-open');
      this.showState(null);
      this.currentProduct = null;
      this.selectedOptions = {};
    }
    
    async loadProduct(handle) {
      if (!handle || handle.trim() === '') {
        this.showError('No product selected. Please assign a product to this item.');
        return;
      }

      this.openModal();
      this.showState(this.elements.loadingState);
      
      try {
        // Clean the handle and construct URL
        const cleanHandle = handle.trim();
        const productUrl = `/products/${cleanHandle}.js`;
        
        const response = await fetch(productUrl, {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          if (response.status === 404) {
            throw new Error(`Product "${cleanHandle}" not found. Please check the product handle or ensure the product is published.`);
          } else {
            throw new Error(`Failed to load product (${response.status}). Please try again.`);
          }
        }
        
        const product = await response.json();
        
        // Enhanced validation
        if (!product || typeof product !== 'object') {
          throw new Error('Invalid product data format received');
        }
        
        if (!product.id) {
          throw new Error('Product data missing ID');
        }
        
        if (!product.title) {
          throw new Error('Product data missing title');
        }
        
        // Check variants more thoroughly
        if (!product.variants || !Array.isArray(product.variants) || product.variants.length === 0) {
          throw new Error('Product has no available variants');
        }
        
        // Validate at least one variant has required data
        const validVariant = product.variants.find(v => v && v.id && typeof v.price !== 'undefined');
        if (!validVariant) {
          throw new Error('Product variants missing required data');
        }
        
        this.renderProduct(product);
        
      } catch (error) {
        this.showError(error.message || 'Failed to load product. Please try again or contact support.');
      }
    }
    
    showError(message) {
      this.showState(this.elements.errorState);
      const errorElement = this.elements.errorState.querySelector('p');
      if (errorElement) {
        errorElement.textContent = message;
      }
    }
    
    validateProduct(product) {
      if (!product || typeof product !== 'object') {
        return false;
      }
      
      if (!product.title) {
        return false;
      }
      
      if (!product.variants || !Array.isArray(product.variants) || product.variants.length === 0) {
        return false;
      }
      
      // Validate at least one variant has required properties
      const validVariants = product.variants.filter(variant => {
        return variant && variant.id && typeof variant.price !== 'undefined';
      });
      
      if (validVariants.length === 0) {
        return false;
      }
      
      return true;
    }

    renderProduct(product) {
      this.currentProduct = product;
      
      // Validate elements exist
      if (!this.elements.modalTitle) {
        this.showError('Modal setup error - missing title element');
        return;
      }
      
      // Set basic product info
      this.elements.modalTitle.textContent = product.title || 'Product';
      
      // Set description
      if (this.elements.descriptionElement) {
        const description = (product.description || '').replace(/<[^>]*>/g, '').trim();
        // Leave full text; CSS will clamp to 4 lines for readability
        this.elements.descriptionElement.textContent = description;
      }
      
      // Set product image
      if (this.elements.modalImage) {
        const imageUrl = this.getProductImageUrl(product);
        if (imageUrl) {
          this.elements.modalImage.src = imageUrl;
          this.elements.modalImage.alt = product.title || 'Product image';
          this.elements.modalImage.style.display = 'block';
        } else {
          this.elements.modalImage.style.display = 'none';
        }
      }
      
      // Initialize options containers
      this.selectedOptions = {};
      
      // Get the option selectors
      const colorSelector = this.modal.querySelector('[data-color-selector]');
      const sizeSelector = this.modal.querySelector('[data-size-selector]');
      const dynamicContainer = this.modal.querySelector('[data-options-container]');
      
      // Hide all selectors initially
      if (colorSelector) colorSelector.style.display = 'none';
      if (sizeSelector) sizeSelector.style.display = 'none';
      if (dynamicContainer) dynamicContainer.innerHTML = '';
      
      // Set up first available variant
      const firstVariant = product.variants.find(v => v.available) || product.variants[0];
      
      if (firstVariant && this.elements.priceCurrentElement) {
        this.elements.variantIdInput.value = firstVariant.id;
        // Use innerHTML for proper currency formatting
        this.elements.priceCurrentElement.innerHTML = this.formatMoney(firstVariant.price);
        
        // Handle compare price for first variant
        if (firstVariant.compare_at_price && firstVariant.compare_at_price > firstVariant.price) {
          this.elements.priceCompareElement.innerHTML = this.formatMoney(firstVariant.compare_at_price);
          this.elements.priceCompareElement.hidden = false;
        } else {
          this.elements.priceCompareElement.hidden = true;
        }
        
        if (this.elements.submitButton) {
          this.elements.submitButton.disabled = !firstVariant.available;
        }
        if (this.elements.buttonText) {
          this.elements.buttonText.textContent = firstVariant.available ? 'ADD TO CART' : 'SOLD OUT';
        }
      }
      
      // Render options if product has them
      if (product.options && product.options.length > 1) {
        this.renderOptions(product);
      }
      
      // Show content
      this.showState(this.elements.contentState);
    }
    
    getProductImageUrl(product) {
      // Try multiple image sources
      if (product.featured_image) {
        return typeof product.featured_image === 'string' ? product.featured_image : product.featured_image.src;
      }
      
      if (product.images && product.images.length > 0) {
        const firstImage = product.images[0];
        return typeof firstImage === 'string' ? firstImage : firstImage.src;
      }
      
      if (product.image) {
        return typeof product.image === 'string' ? product.image : product.image.src;
      }
      
      return null;
    }
    
    renderOptions(product) {
      // Reset options
      this.selectedOptions = {};
      
      // Get option selectors from modal directly
      const colorSelector = this.modal.querySelector('[data-color-selector]');
      const sizeSelector = this.modal.querySelector('[data-size-selector]');
      const dynamicContainer = this.modal.querySelector('[data-options-container]');
      
      // Hide all option selectors initially
      if (colorSelector) colorSelector.style.display = 'none';
      if (sizeSelector) sizeSelector.style.display = 'none';
      if (dynamicContainer) dynamicContainer.innerHTML = '';
      
      if (!product.options || product.options.length === 0) {
        // For products without options, select the first available variant
        if (product.variants && product.variants.length > 0) {
          const firstAvailableVariant = product.variants.find(v => v.available) || product.variants[0];
          this.elements.variantIdInput.value = firstAvailableVariant.id;
        }
        return;
      }
      
      product.options.forEach((option, index) => {
        const optionName = typeof option === 'string' ? option : option.name || option.public_name || '';
        if (!optionName) return;
        
        // Get unique values for this option
        const values = this.getOptionValues(product, index);
        if (values.length <= 1) {
          // For single-value options, auto-select the value
          if (values.length === 1) {
            this.selectedOptions[index] = values[0];
          }
          return; // Skip single-value options in UI
        }
        
        // Handle Color options
        if (/color|colour/i.test(optionName) && colorSelector) {
          colorSelector.style.display = 'block';
          const colorOptions = colorSelector.querySelector('[data-color-options]');
          colorOptions.innerHTML = '';
          
          values.forEach((value, i) => {
            const colorOption = document.createElement('button');
            colorOption.type = 'button';
            colorOption.className = 'product-modal__color-option';
            colorOption.textContent = value;
            colorOption.dataset.value = value;
            colorOption.dataset.optionIndex = index;
            const swatch = this.resolveColor(value);
            colorOption.style.setProperty('--swatch', swatch);
            colorOption.setAttribute('aria-pressed', i === 0 ? 'true' : 'false');
            
            if (i === 0) {
              colorOption.classList.add('selected');
              this.selectedOptions[index] = value;
            }
            
            colorOption.addEventListener('click', () => {
              // Remove selected state from all color options
              colorOptions.querySelectorAll('.product-modal__color-option').forEach(opt => {
                opt.classList.remove('selected');
                opt.setAttribute('aria-pressed', 'false');
              });
              
              // Add selected class to clicked option
              colorOption.classList.add('selected');
              colorOption.setAttribute('aria-pressed', 'true');
              this.selectedOptions[index] = value;
              this.updateVariantSelection();
            });
            
            colorOptions.appendChild(colorOption);
          });
        }
        // Handle Size options
        else if (/size/i.test(optionName) && sizeSelector) {
          sizeSelector.style.display = 'block';
          const sizeSelect = sizeSelector.querySelector('[data-size-select]');
          sizeSelect.innerHTML = '<option value="">Choose your size</option>';
          
          values.forEach(value => {
            const option = document.createElement('option');
            option.value = value;
            option.textContent = value;
            sizeSelect.appendChild(option);
          });
          
          sizeSelect.addEventListener('change', () => {
            if (sizeSelect.value) {
              this.selectedOptions[index] = sizeSelect.value;
              this.updateVariantSelection();
            }
          });
        }
        // Handle other options with the original swatch system
        else {
          const group = document.createElement('div');
          group.className = 'product-modal__option-group';
          
          const label = document.createElement('label');
          label.className = 'product-modal__option-label';
          label.textContent = optionName;
          group.appendChild(label);
          
          const swatchContainer = document.createElement('div');
          swatchContainer.className = 'product-modal__option-swatches';
          swatchContainer.setAttribute('role', 'radiogroup');
          swatchContainer.setAttribute('aria-label', optionName);
          
          values.forEach((value, i) => {
            const swatch = document.createElement('button');
            swatch.type = 'button';
            swatch.className = 'product-modal__swatch';
            swatch.textContent = value;
            swatch.setAttribute('role', 'radio');
            swatch.setAttribute('aria-checked', i === 0 ? 'true' : 'false');
            swatch.dataset.value = value;
            swatch.dataset.optionIndex = index;
            
            if (i === 0) {
              this.selectedOptions[index] = value;
            }
            
            swatch.addEventListener('click', () => {
              this.selectedOptions[index] = value;
              
              // Update aria-checked
              swatchContainer.querySelectorAll('.product-modal__swatch').forEach(s => {
                s.setAttribute('aria-checked', 'false');
              });
              swatch.setAttribute('aria-checked', 'true');
              
              this.updateVariantSelection();
            });
            
            swatchContainer.appendChild(swatch);
          });
          
          group.appendChild(swatchContainer);
          if (dynamicContainer) {
            dynamicContainer.appendChild(group);
          }
        }
      });
      
      // Update variant selection after setting up options
      this.updateVariantSelection();
    }
    
    getOptionValues(product, optionIndex) {
      if (!product || !product.variants || !Array.isArray(product.variants)) {
        return [];
      }
      
      const values = new Set();
      product.variants.forEach(variant => {
        if (variant && typeof variant === 'object') {
          const value = variant[`option${optionIndex + 1}`];
          if (value !== null && value !== undefined && value !== '') {
            values.add(value);
          }
        }
      });
      return Array.from(values).filter(value => value); // Remove any falsy values
    }

    // Resolve a color name/value to a usable CSS color string for swatch borders
    resolveColor(value) {
      if (!value) return '#9ca3af';
      const v = String(value).trim().toLowerCase();
      // If already a valid css color format
      if (/^#([0-9a-f]{3}|[0-9a-f]{6})$/.test(v) || /^rgb(a)?\(/.test(v) || /^hsl(a)?\(/.test(v)) {
        return value;
      }
      const map = {
        black: '#000000', white: '#ffffff', blue: '#1d4ed8', navy: '#1e3a8a',
        lightblue: '#3b82f6', red: '#dc2626', green: '#16a34a', teal: '#14b8a6',
        yellow: '#f59e0b', orange: '#f97316', pink: '#ec4899', purple: '#8b5cf6',
        brown: '#6b4f4f', grey: '#9ca3af', gray: '#9ca3af', silver: '#c0c0c0',
        gold: '#d4af37', beige: '#f5f5dc', cream: '#fffdd0', khaki: '#bdb76b',
        burgundy: '#800020', maroon: '#7f1d1d'
      };
      if (map[v]) return map[v];
      if (v.includes('blue')) return map.blue;
      if (v.includes('navy')) return map.navy;
      if (v.includes('black')) return map.black;
      if (v.includes('white')) return map.white;
      if (v.includes('red')) return map.red;
      if (v.includes('green')) return map.green;
      if (v.includes('yellow')) return map.yellow;
      if (v.includes('orange')) return map.orange;
      if (v.includes('pink')) return map.pink;
      if (v.includes('purple')) return map.purple;
      if (v.includes('grey') || v.includes('gray')) return map.grey;
      return '#9ca3af';
    }
    
    findVariant() {
      if (!this.currentProduct || !this.currentProduct.variants || !Array.isArray(this.currentProduct.variants)) {
        return null;
      }
      
      // If no options or no selected options, return first available variant
      if (!this.currentProduct.options || this.currentProduct.options.length === 0 || Object.keys(this.selectedOptions).length === 0) {
        return this.currentProduct.variants.find(variant => variant.available) || this.currentProduct.variants[0];
      }
      
      return this.currentProduct.variants.find(variant => {
        return this.currentProduct.options.every((option, index) => {
          const selectedValue = this.selectedOptions[index];
          if (!selectedValue) return true;
          return variant[`option${index + 1}`] === selectedValue;
        });
      });
    }
    
    updateVariantSelection() {
      const variant = this.findVariant();
      
      if (variant) {
        this.elements.variantIdInput.value = variant.id;
        
        // Update price with better error handling
        try {
          const priceText = this.formatMoney(variant.price);
          // Use innerHTML to preserve currency symbols and formatting
          this.elements.priceCurrentElement.innerHTML = priceText || 'Price unavailable';
        } catch (error) {
          this.elements.priceCurrentElement.innerHTML = 'Price unavailable';
        }
        
        // Compare price
        if (variant.compare_at_price && variant.compare_at_price > variant.price) {
          try {
            const comparePriceText = this.formatMoney(variant.compare_at_price);
            this.elements.priceCompareElement.innerHTML = comparePriceText;
            this.elements.priceCompareElement.hidden = false;
          } catch (error) {
            this.elements.priceCompareElement.hidden = true;
          }
        } else {
          this.elements.priceCompareElement.hidden = true;
        }
        
        // Update button state
        const isAvailable = variant.available !== false && variant.inventory_quantity !== 0;
        this.elements.submitButton.disabled = !isAvailable;
        this.elements.buttonText.textContent = isAvailable ? 'ADD TO CART' : 'SOLD OUT';
        
        // Update image if variant has one
        if (variant.featured_image) {
          const variantImageUrl = typeof variant.featured_image === 'string' ? 
            variant.featured_image : variant.featured_image.src;
          if (variantImageUrl && this.elements.modalImage) {
            this.elements.modalImage.src = variantImageUrl;
            this.elements.modalImage.alt = this.currentProduct.title + ' - ' + variant.title;
          }
        }
      } else {
        // If no variant found, try to find the first available one
        const fallbackVariant = this.currentProduct?.variants?.find(v => v.available) || 
                               this.currentProduct?.variants?.[0];
        
        if (fallbackVariant) {
          this.elements.variantIdInput.value = fallbackVariant.id;
          this.elements.priceCurrentElement.innerHTML = this.formatMoney(fallbackVariant.price) || 'Price unavailable';
          this.elements.submitButton.disabled = !fallbackVariant.available;
          this.elements.buttonText.textContent = fallbackVariant.available ? 'ADD TO CART' : 'SOLD OUT';
        } else {
          this.elements.variantIdInput.value = '';
          this.elements.submitButton.disabled = true;
          this.elements.buttonText.textContent = 'Unavailable';
        }
      }
    }
    
    async handleAddToCart() {
      const variantId = this.elements.variantIdInput.value;
      const quantity = 1; // Fixed quantity since we removed the quantity selector
      
      if (!variantId || this.elements.submitButton.disabled || this.isSubmitting) return;
      
      this.isSubmitting = true;
      this.elements.submitButton.disabled = true;
      this.elements.buttonText.hidden = true;
      this.elements.buttonLoading.hidden = false;
      
      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            id: parseInt(variantId, 10),
            quantity: quantity
          })
        });
        
        if (!response.ok) throw new Error('Failed to add to cart');
        
        const item = await response.json();
        
        // Success - close modal and dispatch event
        this.closeModal();
        
        // Dispatch custom event for cart updates
        document.dispatchEvent(new CustomEvent('cart:item-added', {
          detail: { item, quantity }
        }));
        
        // Update cart drawer if it exists
        if (window.Shopify && window.Shopify.theme && window.Shopify.theme.jsCart) {
          window.Shopify.theme.jsCart.refresh();
        }
        
      } catch (error) {
        // Show error message
        this.elements.buttonText.textContent = 'Error - Try again';
        this.elements.buttonText.hidden = false;
        this.elements.buttonLoading.hidden = true;
        
        setTimeout(() => {
          this.updateVariantSelection();
        }, 2000);
      } finally {
        this.isSubmitting = false;
        // Don't force enable the button - let updateVariantSelection handle it
        if (!this.elements.buttonText.textContent.includes('Error')) {
          this.updateVariantSelection();
        }
      }
    }

  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initProductShowcase);
  } else {
    initProductShowcase();
  }
  
  function initProductShowcase() {
    document.querySelectorAll('.product-showcase').forEach((section) => {
      new ProductShowcaseModal(section);
    });
  }
  
  // Reinitialize on section reload (Theme Editor)
  document.addEventListener('shopify:section:load', (event) => {
    const section = event.target.querySelector('.product-showcase');
    if (section) {
      new ProductShowcaseModal(section);
    }
  });
</script>

{% schema %}
{
  "name": "Products Grid View",
  "tag": "section",
  "class": "section-tisso-vision",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Tisso vision in the wild"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "max_products",
      "label": "Maximum products",
      "min": 1,
      "max": 12,
      "step": 1,
      "default": 6
    },
    {
      "type": "header",
      "content": "Product source"
    },
    {
      "type": "radio",
      "id": "product_source",
      "label": "Product source",
      "options": [
        {
          "value": "manual",
          "label": "Manual selection"
        },
        {
          "value": "collection",
          "label": "From collection"
        }
      ],
      "default": "manual",
      "info": "Choose whether to manually select products or pull from a collection"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection",
      "info": "Used when 'From collection' is selected above"
    },
    {
      "type": "header",
      "content": "Default hotspot position"
    },
    {
      "type": "range",
      "id": "hotspot_x",
      "label": "Horizontal position (%)",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 85,
      "info": "Default position from left (used for collection products)"
    },
    {
      "type": "range",
      "id": "hotspot_y",
      "label": "Vertical position (%)",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 15,
      "info": "Default position from top (used for collection products)"
    }
  ],
  "blocks": [
    {
      "type": "product_item",
      "name": "Product Showcase",
      "settings": [
        {
          "type": "header",
          "content": "Product selection"
        },
        {
          "type": "product",
          "id": "product",
          "label": "Choose product",
          "info": "Select a product to showcase with hotspot interaction"
        },
        {
          "type": "header",
          "content": "Custom image (optional)"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "Custom image",
          "info": "Upload a custom lifestyle image. If not selected, the product's featured image will be used. Recommended: 800 x 1067px"
        },
        {
          "type": "text",
          "id": "image_alt",
          "label": "Image alt text",
          "info": "Describe the image for screen readers. Leave empty to use product title."
        },
        {
          "type": "header",
          "content": "Hotspot position"
        },
        {
          "type": "range",
          "id": "hotspot_x",
          "label": "Horizontal position (%)",
          "min": 0,
          "max": 100,
          "step": 5,
          "default": 85,
          "info": "Position from left edge"
        },
        {
          "type": "range",
          "id": "hotspot_y",
          "label": "Vertical position (%)",
          "min": 0,
          "max": 100,
          "step": 5,
          "default": 15,
          "info": "Position from top edge"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Products Grid View",
      "settings": {
        "heading": "Tisso vision in the wild",
        "max_products": 6,
        "product_source": "manual"
      },
      "blocks": [
        {
          "type": "product_item",
          "settings": {
            "hotspot_x": 20,
            "hotspot_y": 30
          }
        },
        {
          "type": "product_item",
          "settings": {
            "hotspot_x": 75,
            "hotspot_y": 20
          }
        },
        {
          "type": "product_item",
          "settings": {
            "hotspot_x": 60,
            "hotspot_y": 70
          }
        },
        {
          "type": "product_item",
          "settings": {
            "hotspot_x": 85,
            "hotspot_y": 15
          }
        },
        {
          "type": "product_item",
          "settings": {
            "hotspot_x": 30,
            "hotspot_y": 60
          }
        },
        {
          "type": "product_item",
          "settings": {
            "hotspot_x": 70,
            "hotspot_y": 40
          }
        }
      ]
    }
  ]
}
{% endschema %}
